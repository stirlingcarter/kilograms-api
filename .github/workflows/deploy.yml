name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-plan:
    name: Test and Plan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install flake8

    - name: Lint with flake8
      run: flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      if: github.event_name == 'push'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform
      env:
        TF_VAR_meili_url: ${{ secrets.MEILI_URL }}
        TF_VAR_meili_api_key: ${{ secrets.MEILI_API_KEY }}

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test-and-plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.9
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      id: apply
      run: |
        terraform -chdir=terraform apply -auto-approve \
          -var="key_name=${{ secrets.AWS_KEY_NAME }}" \
          -var="meili_url=${{ secrets.MEILI_URL }}" \
          -var="meili_api_key=${{ secrets.MEILI_API_KEY }}"

    - name: Get Public IP
      id: public_ip
      run: |
        PUBLIC_IP=$(terraform -chdir=terraform output -raw public_ip)
        echo "ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        echo "Public IP is: $PUBLIC_IP"

    - name: Wait for SSH to be ready
      run: sleep 30s

    - name: Copy application code to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ steps.public_ip.outputs.ip }}
        username: ubuntu
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        source: "app/"
        target: "/tmp/"

    - name: Setup Python API on EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ steps.public_ip.outputs.ip }}
        username: ubuntu
        key: ${{ secrets.AWS_PRIVATE_KEY }}
        timeout: 30s
        script: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          sudo pip3 install -r /tmp/app/requirements.txt
          cd /tmp
          sudo nohup uvicorn app.main:app --host 0.0.0.0 --port 80 &
          sleep 5 # Give the process a moment to start
          ps aux | grep uvicorn # Check if the process is running
          sudo ufw status # Check the firewall status 